// Generated by CoffeeScript 1.12.7
#target aftereffects;
var _bake, _bakeLayer, _comp, _fitLayer, _layer;

_bake = function(target) {
  var i, j, ref, results;
  if (target instanceof CompItem) {
    results = [];
    for (i = j = 1, ref = target.numLayers; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
      results.push(_bakeLayer(target.layers[i]));
    }
    return results;
  } else if (target instanceof AVLayer) {
    return _bakeLayer(target);
  }
};

_bakeLayer = function(layer) {
  var comp, effect, i, j, property, ref;
  comp = layer.containingComp;
  comp.openInViewer();
  layer.outPoint = 1 * layer.containingComp.frameDuration;
  for (i = j = 1, ref = layer.Effects.numProperties; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
    effect = layer.Effects.property(i);
    property = effect.property(1);
    if (property.canSetExpression && property.expressionEnabled) {
      property.selected = true;
    }
  }
  return app.executeCommand(app.findMenuCommandId("Convert Expression to Keyframes"));
};

_layer = function(composition, layerName) {
  if (typeof composition === "string") {
    composition = _comp(composition);
  }
  return esy.composition.first(composition, layerName);
};

_comp = function(compositionName) {
  return esy.project.first(compositionName);
};

_fitLayer = function(layer) {
  var compRatio, mediaRatio, scale, size;
  size = layer.sourceRectAtTime(0, false);
  compRatio = layer.containingComp.width / layer.containingComp.height;
  mediaRatio = layer.width / layer.height;
  if (mediaRatio > compRatio) {
    scale = layer.containingComp.width / size.width * 100;
  } else {
    scale = layer.containingComp.height / size.height * 100;
  }
  return layer.property("Scale").setValue([scale, scale]);
};
